一、配置
	1、全局变量：模板中继承UserMixin类，current_user.xxx直接调出对象对应的属性值
	2、引入配置文件：
		a、[.py文件] app.config.from_object('voteconfig')[配置文件的名字，数据库等配置信息可以放在此.py配置文件中]
		b、[json文件]:
			conf_file = os.path.normpath(os.path.join(__file__, '..', '..', 'config.json'))  获取json文件路径
			try:
				with open(conf_file, 'r', encoding='utf-8') as f:
					conf = json.load(f) 将读出的内容转化成字典    
			except BaseException as e:
				sys.stderr.write('failed to read config %s: %s\n' % (conf_file, e))
				conf = {}     如果不存在json文件设为空字典
		c、引用：
			第一种方法直接在__init__.py文件中调用 即可
			第二种方法需通过赋值引用(__init__文件中)：gs_redenvelop_url = conf["GS_RERDENVELOP_URL"]或 conf.get('aaa','')如果没有为空
       
	3、	form 表单如果不加action 自动跳转到自己的对应的视图函数中
		pip install -r requirements.txt（安装文件中的内容）   |  pip install -e . （安装的是setup.py中的内容）  
		用ajax（自动提交）提交事件时不能使用submit按钮，否则会提交两次，改用普通的button
             
二、数据库操作：from flask_sqlalchemy import SQLAlchemy 引入   实例化 db = SQLAlchemy(app)
    注：在使用sql语句对数据库进行查询时，若有变量需要用格式化的方式赋值，不能直接使用 值=变量
	1、更新表中数据（多组）
       flask Model.query.filter(Model.xx == xx).update({  })  可以更新 所有 满足xx的内容   
	   db.session.commit() 提交更新
       或：
        players = Player.query.filter(Player.invited_code == invite_code).all() 降满足条件的所有内容查询出来（players是一个对象的列表）  
	    for player in players:      遍历这个对象的列表
	        player.invited_code = 'ccc'    跟新对象中的属性的值
	        player.parent_name = 'zhao'
	        player.parent_id = -1
	    db.session.commit()  %%%%%%%%  commit提交，若不提交则更改不生效

	2、向数据表中添加数据：
		             promoter = Model(user=request.form.get('user'))
		             db.session.add(promoter)
		             db.session.commit()

	3、查询数据：
		1、sql语句查询：sql = 'SELECT DATE(query_date), hour, count FROM hourly_count_user WHERE query_date between %s and %s '
		                        query = db.engine.execute(sql, start_time_str, end_time_str)
        2、[sqlalchemy]
			db.session.query(Role.id，Role.name).filter(Role.type!=0).group_by(Role.id,Role.name).order_by(Promoter.id).all()
                                                                    [要分别以查询的所有字段进行分组，否则会抛错]
			查询：query.filter(~User.name.in_(['ed', 'wendy', 'jack']))  查询不在列表中的数据
				  query.filter(User.name.in_(['ed', 'wendy', 'jack']))   在列表里的数据
        3、[flask-sqlalchemy]
			Role.query.filter(Role.id == id).order_by(Role.id)
        4、联表查询：(例中表1的id和表2的id相等且表1的id=1，查询表1的id并进行分组)
           indirect = db.session.query(Table1.id, func.sum(Table2.amount)).outerjoin(\
                      Table2,Table2.id==Table1.id).filter(Table1.id==1).group_by(Promoter.id).all()
三、flask-sqlalchemy
    1、from flask_sqlalchemy import SQLAlchemy    引入模块
    2、app = Flask(__name__)   实例化app
    3、app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'   连接数据库
        {
         mysql和postgresql ：mysql(postgresql)://username:passawd@hostname/database
         sqlites : sqlite:///[c:/]absolute/path/database
        }
    4、db = SQLAlchemy(app)  实例化数据库 
    5、迁移数据库： init   migrate   upgrade(downgrade取消更新)
    6、eg：
        python manage.py db upgrade [version_id]  升级
        python manage.py db downgade [version_id] 降级	

四、flask_request：
    1、获取跳转前的路由：ref = request.referrer
    2、获取上传的文件或者图片：
        files = request.files.values() #多个文件
        file = request.files['file'] #获取指定的文件

五、flask-admin
    1、初始化admin
    from flask_admin import Admin, helpers as admin_helpers  #引用
    from flask_admin.contrib.sqla import ModelView
    2、初始化
    admin = Admin(app, name=u'游戏管理平台',
              template_mode='bootstrap3',
              base_template='admin/majiang_master.html')  #在主模板上增加新的新的功能
    3、在主模板上添加功能按钮
                   #进入此视图的显示和功能@a1   #表模型@a2
    admin.add_view(DailyRegisterModelView(DailyRegister,db.session,
                                        name=u'新增玩家报表', #菜单名（下拉菜单） 
                                        category=u'数据收集',  #父级菜单名
                                        need_role='report'))  #权限
    4、@a1:
    #此类可写在视图中（route）
    class DailyRegisterModelView(ModelView): #继承，涉及权限时可以a集成ModelView,此类在继承a
        column_labels = {'id':u'ID'}   #列显示的别名
        can_create = False     #
        can_delete = False
        can_edit = False       #各行信息是否可创建、删除和编辑
        column_default_sort = ('id', True)   #默认 排序
        column_filters = (FilterLike(column=DailyRegister.platform, name=u'平台标识'),  #默认筛选器字段
                        IntEqualFilter(column=DailyRegister.promoter_0_id, name=u'总代ID'),
                        DateTimeBetweenFilter(column=DailyRegister.date, name=u'查询日期') 
    5、创建表单
    from wtforms.fields import SelectField
    from wtforms import StringField, PasswordField
    from wtforms.validators import Required, EqualTo
    from flask_wtf import Form

    class CreateForm(Form):
        user = StringField(u'帐号',validators=[Required()])
        pwd = PasswordField(u'密码', validators=[Required(), EqualTo('pwd2', message=u'两次密码必须一致!')])
    #可直接使用表单提交数据

    6、在基础莫班上添加新功能（如注册新用户）
    from flask_admin import expose 
    class PromoterModelView(ModelView): #此类继承modelview，涉及权限时操作方法如上
        #方法写在此类的下面
        @expose("/login_promoter/", methods=('GET',))
        def login_promoter(self):
            #操作同普通路由（此处使用form表单提交）

六、将依赖追加到文档中
    pip freeze >requirements.txt
